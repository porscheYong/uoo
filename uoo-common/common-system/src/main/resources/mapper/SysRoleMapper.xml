<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ffcs.uoo.system.dao.SysRoleMapper">
	<resultMap id="BaseResultMap" type="cn.ffcs.uoo.system.entity.SysRole">
		<id column="ROLE_ID" property="roleId" />
		<result column="ROLE_NAME" property="roleName" />
		<result column="ROLE_CODE" property="roleCode" />
		<result column="PARENT_ROLE_CODE" property="parentRoleCode" />
		<result column="REGION_NBR" property="regionNbr" />
		<result column="SORT_NUM" property="sortNum" />
		<result column="NOTES" property="notes" />
		<result column="STATUS_CD" property="statusCd" />
		<result column="CREATE_DATE" property="createDate" />
		<result column="CREATE_USER" property="createUser" />
		<result column="UPDATE_DATE" property="updateDate" />
		<result column="UPDATE_USER" property="updateUser" />
		<result column="STATUS_DATE" property="statusDate" />
	</resultMap>

	<!-- 通用查询结果列 -->
	<sql id="Base_Column_List">
		ROLE_ID, ROLE_NAME, ROLE_CODE, PARENT_ROLE_CODE,
		REGION_NBR, SORT_NUM, NOTES,
		STATUS_CD, CREATE_DATE, CREATE_USER,
		UPDATE_DATE, UPDATE_USER,
		STATUS_DATE
	</sql>

	<select id="getId" resultType="Long">
		select SEQ_SYS_ROLE_ID.NEXTVAL
		from dual
	</select>
	<select id="selectOne" resultType="cn.ffcs.uoo.system.vo.SysRoleDTO"
		parameterType="Long">
		SELECT DISTINCT r.ROLE_ID ,
		r.ROLE_ID AS roleId,
		r.ROLE_NAME AS roleName,
		r.ROLE_CODE AS
		roleCode,
		r.PARENT_ROLE_CODE AS
		parentRoleCode,
		r.REGION_NBR AS
		regionNbr,
		r.SORT_NUM AS sortNum,
		r.NOTES
		AS notes,
		r.STATUS_CD AS
		statusCd,
		r.CREATE_DATE AS createDate,
		r.CREATE_USER AS createUser,
		r.UPDATE_DATE AS updateDate,
		r.UPDATE_USER
		AS updateUser,
		r.STATUS_DATE
		AS statusDate,
		 
		t2.parentRoleName AS
		parentRoleName,
		t2.parentRoleId as parentRoleId,
		t3.commonRegionName AS commonRegionName,
		t3.locId as locId
		FROM
		SYS_ROLE r
		LEFT JOIN
		SYS_ROLE_PERMISSION_REF rpr ON r.ROLE_CODE = rpr.ROLE_CODE
		<!-- to_char 字符串超过4000就异常LEFT JOIN (
		SELECT
		rpr.ROLE_CODE,
		to_char(wm_concat ( p.PERMISSION_ID )) AS
		permissionIds,
		to_char(wm_concat ( p.PERMISSION_NAME )) AS
		permissionNames,
		to_char(wm_concat ( p.PERMISSION_CODE )) AS permissionCodes
		FROM
		SYS_PERMISSION p
		LEFT JOIN SYS_ROLE_PERMISSION_REF rpr ON
		p.PERMISSION_CODE =
		rpr.PERMISSION_CODE
		WHERE
		p.STATUS_CD = '1000'
		AND
		rpr.STATUS_CD = '1000'
		GROUP BY
		rpr.ROLE_CODE
		) t ON t.ROLE_CODE =
		rpr.ROLE_CODE -->
		LEFT JOIN ( SELECT pr.ROLE_ID as parentRoleId, pr.ROLE_CODE AS rc, pr.ROLE_NAME AS
		parentRoleName FROM
		SYS_ROLE pr WHERE pr.STATUS_CD = '1000' ) t2 ON
		t2.rc =
		r.PARENT_ROLE_CODE
		LEFT JOIN ( SELECT c.LOC_NAME AS
        commonRegionName,c.LOC_ID as locId, c.LOC_CODE FROM
        TB_POLITICAL_LOCATION c WHERE
        c.STATUS_CD = '1000' ) t3 ON t3.LOC_CODE =
        r.REGION_NBR
		WHERE
		r.STATUS_CD = '1000'
		AND ROLE_ID=#{ROLE_ID}


	</select>
	<select id="treeRole" resultType="cn.ffcs.uoo.system.vo.TreeNodeVo">
		SELECT
		r.ROLE_ID AS id,
		r.ROLE_NAME AS name,
		pr.ROLE_ID AS pid,
		r.ROLE_CODE AS extField1
		FROM
		sys_role r
		LEFT JOIN sys_role pr ON pr.ROLE_CODE = r.PARENT_ROLE_CODE
		AND r.STATUS_CD = '1000'
		AND pr.STATUS_CD = '1000'
	</select>
	<select id="findList" resultType="cn.ffcs.uoo.system.vo.SysRoleDTO"
		parameterType="java.util.HashMap">
		 
		SELECT DISTINCT r.ROLE_ID ,
		r.ROLE_ID AS roleId,
		r.ROLE_NAME AS roleName,
		r.ROLE_CODE AS
		roleCode,
		r.PARENT_ROLE_CODE AS
		parentRoleCode,
		r.REGION_NBR AS
		regionNbr,
		r.SORT_NUM AS sortNum,
		r.NOTES
		AS notes,
		r.STATUS_CD AS
		statusCd,
		r.CREATE_DATE AS createDate,
		r.CREATE_USER AS createUser,
		r.UPDATE_DATE AS updateDate,
		r.UPDATE_USER
		AS updateUser,
		r.STATUS_DATE
		AS statusDate,
		
		
		t3.commonRegionName AS commonRegionName
		FROM
		SYS_ROLE r
		LEFT JOIN
		SYS_ROLE_PERMISSION_REF rpr ON r.ROLE_CODE = rpr.ROLE_CODE
		<!-- LEFT JOIN (
		SELECT
		rpr.ROLE_CODE,
		to_char(wm_concat ( p.PERMISSION_NAME )) AS
		permissionNames,
		to_char(wm_concat ( p.PERMISSION_CODE )) AS permissionCodes
		FROM
		SYS_PERMISSION p
		LEFT JOIN SYS_ROLE_PERMISSION_REF rpr ON
		p.PERMISSION_CODE =
		rpr.PERMISSION_CODE
		WHERE
		p.STATUS_CD = '1000'
		AND
		rpr.STATUS_CD = '1000'
		GROUP BY
		rpr.ROLE_CODE
		) t ON t.ROLE_CODE =
		rpr.ROLE_CODE -->
		LEFT JOIN ( SELECT c.LOC_NAME AS
        commonRegionName, c.LOC_CODE FROM
        TB_POLITICAL_LOCATION c WHERE
        c.STATUS_CD = '1000' ) t3 ON t3.LOC_CODE =
        r.REGION_NBR
		WHERE
		r.STATUS_CD = '1000'
		<if test="ROLE_ID !=null and ROLE_ID !=''">
			AND ROLE_ID=#{ROLE_ID}
		</if>
		<if test="keyWord !=null and keyWord !=''">
			AND ROLE_NAME LIKE #{keyWord}
		</if>
		<choose>
			<when test="PARENT_ROLE_CODE !=null and PARENT_ROLE_CODE !=''">
				<choose>
					<when test="includeChild !=null and includeChild !=''">
						START WITH ( r.PARENT_ROLE_CODE = #{PARENT_ROLE_CODE} ) CONNECT BY
						PRIOR r.ROLE_CODE = r.PARENT_ROLE_CODE
					</when>
					<otherwise>
						AND r.PARENT_ROLE_CODE = #{PARENT_ROLE_CODE}
					</otherwise>
				</choose>
			</when>
			<otherwise>

				<choose>
					<when test="includeChild !=null and includeChild !=''">
						START WITH ( r.PARENT_ROLE_CODE is null or r.PARENT_ROLE_CODE = '')
						CONNECT BY PRIOR r.ROLE_CODE = r.PARENT_ROLE_CODE
					</when>
					<otherwise>
						AND r.PARENT_ROLE_CODE is null or r.PARENT_ROLE_CODE = ''
					</otherwise>
				</choose>

			</otherwise>
		</choose>
		 
	</select>
	<select id="countList" resultType="Long" parameterType="java.util.HashMap">
		SELECT
		 count(DISTINCT r.ROLE_ID  )
		FROM
		SYS_ROLE r
		LEFT JOIN SYS_ROLE_PERMISSION_REF rpr ON
		r.ROLE_CODE = rpr.ROLE_CODE
		<!-- LEFT JOIN (
		SELECT
		rpr.ROLE_CODE,
		to_char(wm_concat (
		p.PERMISSION_NAME )) AS permissionNames,
		to_char(wm_concat ( p.PERMISSION_CODE ))
		AS permissionCodes
		FROM
		SYS_PERMISSION p
		LEFT JOIN
		SYS_ROLE_PERMISSION_REF rpr ON p.PERMISSION_CODE =
		rpr.PERMISSION_CODE
		WHERE
		p.STATUS_CD = '1000'
		AND rpr.STATUS_CD = '1000'
		GROUP BY
		rpr.ROLE_CODE
		) t ON t.ROLE_CODE = rpr.ROLE_CODE -->
		 
		LEFT JOIN ( SELECT c.LOC_NAME AS
        commonRegionName, c.LOC_CODE FROM
        TB_POLITICAL_LOCATION c WHERE
        c.STATUS_CD = '1000' ) t3 ON t3.LOC_CODE =
        r.REGION_NBR
		WHERE
		r.STATUS_CD = '1000'
		<if test="ROLE_ID !=null and ROLE_ID !=''">
			AND r.ROLE_ID=#{ROLE_ID}
		</if>
		<if test="keyWord !=null and keyWord !=''">
			AND r.ROLE_NAME LIKE #{keyWord}
		</if>

		<choose>
			<when test="PARENT_ROLE_CODE !=null and PARENT_ROLE_CODE !=''">
				<choose>
					<when test="includeChild !=null and includeChild !=''">
						START WITH ( r.PARENT_ROLE_CODE = #{PARENT_ROLE_CODE} ) CONNECT BY
						PRIOR r.ROLE_CODE = r.PARENT_ROLE_CODE
					</when>
					<otherwise>
						AND r.PARENT_ROLE_CODE = #{PARENT_ROLE_CODE}
					</otherwise>
				</choose>
			</when>
			<otherwise>

				<choose>
					<when test="includeChild !=null and includeChild !=''">
						START WITH ( r.PARENT_ROLE_CODE is null or r.PARENT_ROLE_CODE = '')
						CONNECT BY PRIOR r.ROLE_CODE = r.PARENT_ROLE_CODE
					</when>
					<otherwise>
						AND r.PARENT_ROLE_CODE is null or r.PARENT_ROLE_CODE = ''
					</otherwise>
				</choose>

			</otherwise>
		</choose>
	</select>
</mapper>